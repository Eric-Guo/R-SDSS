SQL (Structured Query Language) & R
========================================================
author: Eric Guo
date: 2013-10-15
font-family: 'Arial'

## your first & second declarative functional programming language


Agenda
========================================================

- Terminology
- Why SQL / R design like currently status
- Example
    - SQL and R, side by side
- Practice SQL writing style demo
- Practice SQL express logic in functional
- Further reading material


========================================================

# <center>**Declarative**</center>
# <center>vs</center>
# <center>Imperative</center>

Declarative vs Imperative
========================================================

Here will be a picture illustration the relation ship for Declarative vs Imperative

========================================================

# <center>**Functional**</center>
# <center>vs</center>
# <center>Object-oriented</center>

Object-oriented
========================================================
![Object-oriented classes](object-oriented_classes.png)
***
![Object-oriented calling sequence](object-oriented_calling_sequence.png)

Functional
========================================================
![Markdown source](functional_markdown.png)
![Pipeline](functional_process_pipeline.png)
***
![generated HTML](functional_html.png)

Functional (continue)
========================================================
left: 70%
![HTML decorated DOM](functional_decorated_html.png)
![Pipeline](functional_process_pipeline.png)
***
![Final web page](functional_webpage.png)

Imperative programming style
========================================================

Imperative languages are often restricted to a level of detail that is good for their compilers rather than for their programmers (Sokolowski 1991).

```{r}
numbers <- c(1,2,3,4,5)
doubles <- c()

for(x in numbers) {
  doubles <- append(doubles, x*2)
}
doubles
```


Declarative programming style (R)
========================================================

declarative programming is a programming paradigm, a style of building the structure and elements of computer programs, that expresses the logic of a computation without describing its control flow.

```{r}
numbers<-c(1,2,3,4,5)
doubles=sapply(numbers, function(x){x*2})
doubles
```

Declarative programming style (Ruby)
========================================================

More favorite programming syntax in declarative style is functional

```ruby
ruby 2.0.0p247 [i386-mingw32]

c:\git>irb
irb(main):001:0> (1..5).map {|x| x*2}
```

```
=> [2, 4, 6, 8, 10]
```

Functional programming (Scala)
========================================================

Functional programming has type and also have speed.

```scala
Welcome to Scala version 2.9.2 (Java HotSpot(TM) Client VM, Java 1.7.0_40).
scala> 1 until 6
res0: collection.immutable.Range = Range(1, 2, 3, 4, 5)

scala> { x:Int => x * 2 }
res1: Int => Int = <function1>
```

Functional paradigms
========================================================

And it's keystone for parallel in muti-core era.

```scala
scala> 1 until 6 map { _ * 2 }
res2: collection.immutable.IndexedSeq[Int] = Vector(2, 4, 6, 8, 10)

scala> (1 until 6).par map { x => x * 2 }
res3: collection.parallel.immutable.ParSeq[Int] = ParVector(2, 4, 6, 8, 10)
```
